
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if a user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if a user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // READ: Users can read their own document, admins can read any
      allow read: if isOwner(userId) || isAdmin();
      // CREATE: Anyone can create a user document (for signup)
      allow create: if true;
      // UPDATE: Only admins can update user roles
      allow update: if isAdmin();
    }
    
    // Rules for the 'listings' collection
    match /listings/{listingId} {
      // READ: Anyone can read approved listings. Admins can read all.
      allow read: if resource.data.status == 'approved' || isAdmin();
      // CREATE: Only signed-in users can create new listings
      allow create: if isSignedIn();
      // UPDATE: Admins can update any listing. Owners can update their own pending listings.
      allow update: if isAdmin() || (isOwner(resource.data.ownerId) && resource.data.status == 'pending');
      // DELETE: Only admins can delete listings
      allow delete: if isAdmin();

      // Rules for the 'notifications' subcollection within a user document
      match /notifications/{notificationId} {
        // Only the user who owns the parent document can access their notifications
        allow read, write, delete: if isOwner(userId);
      }
    }
  }
}
