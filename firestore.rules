rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Business Listings
    match /listings/{listingId} {
      // READ: Anyone can read approved listings. Admins can read any listing.
      allow read: if resource.data.status == 'approved' || isAdmin();

      // CREATE: Authenticated users can create new listings (status must be 'pending').
      allow create: if request.auth != null && request.resource.data.status == 'pending';

      // UPDATE: Only admins can update listings (e.g., to approve them).
      allow update: if isAdmin();

      // DELETE: Only admins can delete listings.
      allow delete: if isAdmin();
    }

    // Users collection
    match /users/{userId} {
      // READ:
      // 1. A user can read their own document.
      // 2. An admin can read any user document.
      // 3. Any authenticated user can read the 'role' field of any user document.
      allow read: if request.auth.uid == userId || isAdmin() || (request.auth != null && 'role' in resource.data && request.query.keys.hasOnly(['role']));


      // WRITE: Users can only create their own user document upon signup. No one can update it except admins.
      allow write: if request.auth.uid == userId || isAdmin();
      
      // Allow access to subcollections like notifications
      match /{allPaths=**} {
        allow read, write: if request.auth.uid == userId || isAdmin();
      }
    }
  }
}
