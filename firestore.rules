rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user has an 'admin' role
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users collection rules
    match /users/{userId} {
      // Admins can read and write any user document
      allow read, write: if isAdmin();
      // A user can read or update their own document
      allow read, update: if request.auth.uid == userId;
    }

    // Listings collection rules
    match /listings/{listingId} {
      // Anyone can read approved listings
      allow read: if resource.data.status == 'approved';
      // Admins can read any listing regardless of status
      allow read: if isAdmin();
      
      // Logged-in users can create new listings
      allow create: if request.auth != null;

      // Only the owner or an admin can update a listing
      allow update: if request.auth.uid == resource.data.ownerId || isAdmin();

      // Only admins can delete a listing
      allow delete: if isAdmin();
    }
    
    // Categories collection rules
    match /categories/{categoryId} {
        // Anyone can read categories
        allow read: if true;
        // Only admins can write to categories
        allow write: if isAdmin();
    }
    
    // Notifications subcollection rules
    match /users/{userId}/notifications/{notificationId} {
        // A user can read/write their own notifications
        allow read, write: if request.auth.uid == userId;
    }

    // Messages collection rules
    match /messages/{messageId} {
      // Any authenticated user can create a message.
      allow create: if request.auth != null && 
                       'name' in request.resource.data && request.resource.data.name is string &&
                       'email' in request.resource.data && request.resource.data.email is string &&
                       'message' in request.resource.data && request.resource.data.message is string &&
                       'userId' in request.resource.data && request.resource.data.userId == request.auth.uid &&
                       'createdAt' in request.resource.data && request.resource.data.createdAt == request.time;
      // Only admins can read or delete messages.
      allow read, delete: if isAdmin();
    }
  }
}
