rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Rules for the 'users' collection
    match /users/{userId} {
      // Admins can read/write any user document
      allow read, write: if isAdmin();
      
      // Allow any authenticated user to read the role of any other user.
      // This is needed for server-side checks.
      allow get: if request.auth != null;
      
      // A user can update their own document.
      allow update: if request.auth.uid == userId;
    }

    // Rules for the 'listings' collection
    match /listings/{listingId} {
      // Anyone can read (get) a single approved listing
      allow get: if resource.data.status == 'approved';
      
      // Anyone can query (list) approved listings
      allow list: if request.query.offset == null || request.query.offset == 0; // A simple check to allow listing
      
      // Admins can read any listing (pending or approved)
      allow read: if isAdmin();

      // Authenticated users can create new listings
      allow create: if request.auth != null;
      
      // Authenticated users can update a listing to add a review
      allow update: if request.auth != null &&
                      request.resource.data.reviews.size() == resource.data.reviews.size() + 1;

      // Admins can update any field (e.g., to approve a listing)
      allow update: if isAdmin();
    }
    
    // Rules for user notifications subcollection
    match /users/{userId}/notifications/{notificationId} {
        // Admins can do anything
        allow read, write, create, delete: if isAdmin();
        
        // Users can only access their own notifications
        allow read, write: if request.auth.uid == userId;
    }
  }
}
