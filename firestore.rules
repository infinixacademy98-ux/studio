rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Admins can read any user document
      allow get: if isAdmin();
      // Users can read and write to their own document
      allow read, write: if request.auth.uid == userId;

      // Rules for user notifications subcollection
      match /notifications/{notificationId} {
        // Users can read and write their own notifications
        allow read, write: if request.auth.uid == userId;
      }
    }

    // Rules for the 'listings' collection
    match /listings/{listingId} {
      // Admins have full access to all listings
      allow read, create, update, delete: if isAdmin();

      // Logged-in users can create new listings
      allow create: if request.auth.uid != null;

      // Anyone can view listings (both individual and lists)
      allow list, get: if true;

      // Logged-in users can update a listing, but only to add a review
      allow update: if request.auth.uid != null &&
                      request.resource.data.keys().hasAll(resource.data.keys()) &&
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reviews']);
    }
  }
}
