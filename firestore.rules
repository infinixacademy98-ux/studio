rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isApproved(listingId) {
        return get(/databases/$(database)/documents/listings/$(listingId)).data.status == 'approved';
    }
    
    function isListingOwner(listingId) {
        return isOwner(get(/databases/$(database)/documents/listings/$(listingId)).data.ownerId);
    }
    
    function isReviewUpdate(requestData) {
        // Allow only the 'reviews' field to be changed.
        return requestData.keys().hasOnly(['reviews']);
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Admins can read/write any user document
      allow read, write: if isAdmin();
      
      // Users can only read/write their own document
      allow read, write: if isOwner(userId);
    }
    
    // Rules for user 'notifications' subcollection
    match /users/{userId}/notifications/{notificationId} {
        // Users can read/write their own notifications
        allow read, write: if isOwner(userId);
        
        // Admins can read any notification (for potential future management)
        allow read: if isAdmin();
    }

    // Rules for the 'listings' collection
    match /listings/{listingId} {
      // Admins can perform any action on any listing
      allow read, write: if isAdmin();
      
      // ANYONE can read a single approved listing (for details page)
      allow get: if isApproved(listingId);
      
      // ANYONE can list approved listings (for the homepage)
      allow list: if request.query.get("status") == "approved";

      // AUTHENTICATED USERS can:
      // 1. Create a new listing (for themselves)
      allow create: if request.auth != null && isOwner(request.resource.data.ownerId);

      // 2. Update a listing ONLY to add a review, and only if they have read access to it first.
      allow update: if request.auth != null && isApproved(listingId) && isReviewUpdate(request.resource.data);
    }
  }
}
