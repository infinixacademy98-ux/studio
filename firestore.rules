rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for the 'listings' collection
    match /listings/{listingId} {
      // READ: Anyone can read approved listings. Admins can read any listing.
      allow read: if (resource.data.status == 'approved') || isAdmin();
      
      // CREATE: Any authenticated user can create a new listing.
      // The new listing must have a 'pending' status and the ownerId must match the user's UID.
      allow create: if request.auth != null &&
                      request.resource.data.status == 'pending' &&
                      request.resource.data.ownerId == request.auth.uid;
                      
      // UPDATE: Only admins can update listings (e.g., to approve them).
      allow update: if isAdmin();
      
      // DELETE: Only admins can delete listings.
      allow delete: if isAdmin();
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // READ: A user can read their own document. Admins can read any user document.
      allow read: if request.auth.uid == userId || isAdmin();
      
      // CREATE: A user can create their own user document upon signup.
      allow create: if request.auth.uid == userId;
      
      // UPDATE, DELETE: Not allowed for now to prevent users from changing their own roles.
      allow update, delete: if false;

      // Nested 'notifications' subcollection rules
      match /notifications/{notificationId} {
        // READ, WRITE: A user can read and write (which includes deleting or marking as read) their own notifications.
        allow read, write: if request.auth.uid == userId;
      }
    }
  }
}