
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Listings collection rules
    match /listings/{listingId} {
      // ANYONE can read a listing if it has been approved.
      allow read: if resource.data.status == 'approved';
      
      // LOGGED-IN USERS can create a listing.
      // They must be the owner, and the initial status must be 'pending'.
      allow create: if request.auth != null && 
                       request.resource.data.ownerId == request.auth.uid &&
                       request.resource.data.status == 'pending';
                       
      // ADMINS can do anything (create, update, delete).
      allow write: if isAdmin();
    }
    
    // Users collection rules
    match /users/{userId} {
      // A user can read their own document. Admins can read any user document.
      allow read: if request.auth.uid == userId || isAdmin();
      
      // A user can create their own user document upon signup.
      allow create: if request.auth.uid == userId;
      
      // Admins can update any user document (e.g., to change roles).
      allow update: if isAdmin();
      
      // Only admins can delete user documents.
      allow delete: if isAdmin();

      // Notifications subcollection
      match /notifications/{notificationId} {
        // A user can read, update (e.g., mark as read), and delete their own notifications.
        allow read, update, delete: if request.auth.uid == userId;
        // Notifications are created by the server (admin function), so no client-side create rule needed here.
      }
    }
  }
}
