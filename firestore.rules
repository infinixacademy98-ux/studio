
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if a user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // READ: Users can read their own document, admins can read any
      allow read: if isSignedIn() && (isOwner(userId) || isAdmin());
      
      // CREATE: Anyone can create a user document (for sign-up)
      allow create: if true;

      // UPDATE: Only admins can update user roles
      allow update: if isAdmin();
    }

    // Rules for the 'listings' collection
    match /listings/{listingId} {
      // READ: Anyone can read approved listings. Admins can read all.
      allow read: if resource.data.status == 'approved' || isAdmin();

      // CREATE: Only signed-in users can create a new listing
      allow create: if isSignedIn();

      // UPDATE: Admins can update any listing (e.g., to approve it)
      allow update: if isAdmin();
      
      // DELETE: Admins can delete any listing
      allow delete: if isAdmin();
      
      // Nested 'notifications' subcollection for users
      match /notifications/{notificationId} {
        allow read, write: if isOwner(userId);
      }
    }
  }
}
