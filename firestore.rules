rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users:
    // - Anyone can create their own user document.
    // - Only the user themselves or an admin can update their document.
    // - Only admins can delete user documents.
    // - User and Admin can read user document
    match /users/{userId} {
      allow create: if request.auth != null;
      allow read: if request.auth.uid == userId || isAdmin();
      allow update: if request.auth.uid == userId || isAdmin();
      allow delete: if isAdmin();
    }

    // Listings:
    // - Authenticated users can create listings.
    // - Anyone can read approved listings.
    // - Admins can read any listing regardless of status.
    // - Only the owner or an admin can update a listing.
    // - Only admins can delete listings.
    match /listings/{listingId} {
      allow create: if request.auth != null;
      allow read: if resource.data.status == 'approved' || (request.auth != null && isAdmin());
      allow update: if request.auth.uid == resource.data.ownerId || isAdmin();
      allow delete: if isAdmin();
    }

    // Categories:
    // - Anyone can read the list of categories.
    // - Only admins can create, update, or delete categories.
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Messages:
    // - Any authenticated user can create a message.
    // - The message data must be valid (correct fields and types).
    // - Only admins can read or delete messages.
    match /messages/{messageId} {
      allow create: if request.auth != null
                    && request.resource.data.name is string
                    && request.resource.data.email is string
                    && request.resource.data.message is string
                    && request.resource.data.userId == request.auth.uid
                    && request.resource.data.createdAt == request.time;
      allow read, delete: if isAdmin();
    }
    
    // Notifications (subcollection of users)
    // - Only the user can read their own notifications.
    // - Notifications are created by backend functions (implicitly allowed), not clients.
    match /users/{userId}/notifications/{notificationId} {
        allow read, update: if request.auth.uid == userId;
        allow create, delete: if false; // Prevent client-side creation/deletion
    }
  }
}
