rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    match /users/{userId} {
      // Admins can read/write any user document
      allow read, write: if isAdmin();
      
      // Users can read/write their own document
      allow read, write: if request.auth.uid == userId;

      // Authenticated users can read the 'role' of other users
      allow get: if isAuthenticated() && 'role' in resource.data;
    }

    match /listings/{listingId} {
      // Admins can perform any action on any listing
      allow read, write, create, update, delete: if isAdmin();

      // Anyone can view a single approved listing or a list of approved listings
      allow get, list: if resource == null || resource.data.status == 'approved';

      // Authenticated users can create new listings (status will be pending)
      allow create: if isAuthenticated();
      
      // Authenticated users can update a listing ONLY to add a review
      allow update: if isAuthenticated() && request.resource.data.keys().hasOnly(['reviews']);
    }

    // Rules for user-specific subcollections, like notifications
    match /users/{userId}/{collection}/{docId} {
        // Admins can manage any subcollection
        allow read, write: if isAdmin();

        // Users can only access their own subcollections
        allow read, write: if request.auth.uid == userId;
    }
  }
}
